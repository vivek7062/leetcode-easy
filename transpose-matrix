//Question - https://leetcode.com/problems/transpose-matrix/
//Answer in cpp


1. With Extra space

class Solution {
public:
    vector<vector<int>> transpose(vector<vector<int>>& matrix) {
        vector<vector<int>> ans = vector(matrix[0].size(),vector(matrix.size(),0));
        for(int i=0;i<matrix.size();i++){
            for(int j=0 ; j<matrix[i].size();j++){
               ans[j][i] = matrix[i][j];
            }
        }
        return ans ;
        
    }
};


2. With any extra space

class Solution {
public:
    vector<vector<int>> transpose(vector<vector<int>>& matrix) {
        int temp =0,row=matrix.size(), col = matrix[0].size() ,v=0;
        for(int i=0;i<matrix.size();i++){
            int n = matrix[i].size();
            int orginalJ = i;
            int j=i+1;
            for(j=i+1; j<matrix[i].size();j++){
                orginalJ++;
                if(i<j && j<row ){
                    temp = matrix[i][j];
                    matrix[i][j] = matrix[j][i];
                    matrix[j][i] = temp ;
                } else if(j>=row){
                     temp = matrix[i][j];
                    if(i==0){
                        vector<int> addRow;
                        addRow.push_back(temp);
                        matrix.push_back(addRow);
                        matrix[i].erase(matrix[i].begin()+j,matrix[i].begin()+j+1);
                        j=j-1;
                    } else{
                        matrix[orginalJ].push_back(temp);
                        matrix[i].erase(matrix[i].begin()+j,matrix[i].begin()+j+1);
                        j=j-1;
                    }
                    
                } 
                else break ;
            }
            if((j>col && row>col) ){
                for(int p=0; p<col;p++){
                    temp = matrix[i][p];
                    matrix[p].push_back(temp);
                    if(p==col-1){
                        
                            matrix.erase( matrix.begin()+i,matrix.begin() + i+1 );
                            i=i-1;
                    }
                }
            }
            
        }
        return matrix ;
        
    }
};
