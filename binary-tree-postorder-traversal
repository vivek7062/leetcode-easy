//Question -  https://leetcode.com/problems/binary-tree-postorder-traversal/
//Answer in cpp 2 Approach

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 
 1. Using recursion
class Solution {
public:
    vector<int> postorderTraversal(TreeNode* root) {
        vector<int> post;
        postOrder(root,post);
        return post;
             
    }
    
    void postOrder(TreeNode * root,vector<int> & post){
        if(root==NULL){
            return;
        }
        postOrder(root->left,post);
        postOrder(root->right,post);
        post.push_back(root->val);
        
    }
    
  
   
};


2. Using Stack

// class Solution {
// public:
//     vector<int> postorderTraversal(TreeNode* root) {
//         stack<TreeNode*> stack;
//         vector<int> post;
//      if (root==NULL)
//         return post;
//              stack.push(root);
//     while(!stack.empty()){
//        TreeNode * temp = stack.top();
//         stack.pop();
        
        
//         if(temp->left)
//              stack.push(temp->left);
        
//          if(temp->right)
//              stack.push(temp->right);
//         post.push_back(temp->val);
        
//     }
//     reverse(post.begin(),post.end());
//     return post;
    
//     }
   
// };
